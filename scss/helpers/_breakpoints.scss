// Media Query Ranges
$small-range: (0em, 40em) !default;
$medium-range: (40.063em, 64em) !default;
$large-range: (64.063em, 90em) !default;
$xlarge-range: (90.063em, 120em) !default;
$xxlarge-range: (120.063em, 99999999em) !default;

$breakpoints: (
  small: 0px,
  medium: 640px,
  large: 1024px,
  xlarge: 1440px,
  xxlarge: 1920px,
);

$breakpoint-classes: (small medium large);

@mixin breakpoint($val: small) {
  // Size or keyword
  $bp: nth($val, 1);
  // Direction of media query (up, down, or only)
  $dir: if(length($val) > 1, nth($val, 2), up);
  // Eventual output
  $str: '';

  // Orientation media queries have a unique syntax
  @if $bp == 'landscape' or $bp == 'portrait' {
    $str: 'orientation: #{$val}';
  }

  @else {
    // Try to pull a named breakpoint out of the $breakpoints map
    @if type-of($bp) == 'string' {
      @if map-has-key($breakpoints, $bp) {
        $bp: map-get($breakpoints, $bp);
      }
      @else {
        $bp: 0;
      }
    }

    // Pixel and unitless values are converted to rems
    @if unit($bp) == 'px' or unit($bp) == '' {
      $bp: rem-calc($bp);
    }
    // Finally, the rem value is turned into an em value
    $bp: strip-unit($bp) + 'em';

    // And lo, a media query was born
    @if $dir == 'only' {
      $str: 'min-width: #{$bp}) and (max-width: #{$bp - (1/16)}';
    }
    @else if $dir == 'down' {
      $str: 'max-width: #{$bp}';
    }
    @else {
      $str: 'min-width: #{$bp}';
    }
  }

  // Output
  @media only screen and (#{$str}) {
    @content;
  }
}

/*
  Old variables
  Need to convert all references to a newer style eventually
*/

$screen: "only screen" !default;

$landscape: "#{$screen} and (orientation: landscape)" !default;
$portrait: "#{$screen} and (orientation: portrait)" !default;

$small-up: $screen !default;
$small-only: "#{$screen} and (max-width: #{nth($small-range, 2)})" !default;

$medium-up: "#{$screen} and (min-width:#{nth($medium-range, 1)})" !default;
$medium-only: "#{$screen} and (min-width:#{nth($medium-range, 1)}) and (max-width:#{nth($medium-range, 2)})" !default;

$large-up: "#{$screen} and (min-width:#{nth($large-range, 1)})" !default;
$large-only: "#{$screen} and (min-width:#{nth($large-range, 1)}) and (max-width:#{nth($large-range, 2)})" !default;

$xlarge-up: "#{$screen} and (min-width:#{nth($xlarge-range, 1)})" !default;
$xlarge-only: "#{$screen} and (min-width:#{nth($xlarge-range, 1)}) and (max-width:#{nth($xlarge-range, 2)})" !default;

$xxlarge-up: "#{$screen} and (min-width:#{nth($xxlarge-range, 1)})" !default;
$xxlarge-only: "#{$screen} and (min-width:#{nth($xxlarge-range, 1)}) and (max-width:#{nth($xxlarge-range, 2)})" !default;

/*
  CSS Output
*/

// Meta styles are included in all builds, as they are a dependancy of the Javascript.
// Used to provide media query values for javascript components.
// Forward slash placed around everything to convince PhantomJS to read the value.

meta.foundation-version {
  font-family: "/1.0.0/";
}

meta.foundation-mq-small {
  font-family: "/" + unquote($small-up) + "/";
  width: nth($small-range, 1);
}

meta.foundation-mq-medium {
  font-family: "/" + unquote($medium-up) + "/";
  width: nth($medium-range, 1);
}

meta.foundation-mq-large {
  font-family: "/" + unquote($large-up) + "/";
  width: nth($large-range, 1);
}

meta.foundation-mq-xlarge {
  font-family: "/" + unquote($xlarge-up) + "/";
  width: nth($xlarge-range, 1);
}

meta.foundation-mq-xxlarge {
  font-family: "/" + unquote($xxlarge-up) + "/";
  width: nth($xxlarge-range, 1);
}
