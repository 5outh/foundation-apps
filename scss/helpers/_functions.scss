// Foundation for Apps ALPHA
// by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@function foundation($component, $setting) {
  @return map-get(map-get($foundation, $component), $setting);
}

@mixin foundation-component($name, $settings) {
  @if type-of($settings) != 'map' {
    @error "The settings you pass in must be a map.";
  }
  $foundation: map-merge(
    ($name: $settings),
    $foundation
  ) !global;
}

// IMPORT ONCE
// We use this to prevent styles from being loaded multiple times for compenents that rely on other components.
$modules: () !default;
@mixin exports($name) {
  @if not (index($modules, $name)) {
    $modules: append($modules, $name) !global;
    @content;
  }
}

/**
 *   Is It Light?
 *   Checks the lightness of $color, and if it passes the $threshold of lightness, it returns the $yes color.
 *   Otherwise, it returns the $no color. Use this function to dynamically output a foreground color based on
 *   a given background color.
 *
 *   @param {color} $color - Color to check the lightness of.
 *   @param {color} $yes - Color to return if $color is light.
 *   @param {color} $no - Color to return if $color is dark.
 *   @param {percentage} $threshold - Threshold of lightness to check against.
 *
 *   @return The $yes color or $no color.
 */
@function isitlight($color, $yes: #000, $no: #fff, $threshold: 60%) {
  @if (lightness($color) > $threshold) {
    @return $yes;
  }
  @else {
    @return $no;
  }
}

// SMART SCALE
// Given a background color $color, returns an appropriate foreground color.
/**
 *   Smart Scale
 *   Scales a color to be lighter if it's light, or darker if it's dark.
 *   Use this function to "fade" a color appropriate to its lightness.
 *
 *   @param {color} $color - Color to scale.
 *   @param {percentage} $scale - Amount to scale up or down.
 *   @param {percentage} $threshold - Threshold of lightness to check against.
 *
 *   @return A scaled color.
 */
@function smartscale($color, $scale: 5%, $threshold: 60%) {
  @if lightness($color) > $threshold {
    $scale: -$scale;
  }
  @return scale-color($color, $lightness: $scale);
}

// NOT NOTHING
// Returns true if a value isn't 0, none, or null
/**
 *   Has Value
 *   Returns true if a value is not 0, null, or none.
 *   Use this function to check for values like border: 0 or box-shadow: none.
 *
 *   @param $val - Value to check.
 *
 *   @return True if $val is not 0, null, or none.
 */
@function hasvalue($val) {
  @if $val == null or $val == none {
    @return false;
  }
  @if type-of($val) == 'number' and strip-unit($val) == 0 {
    @return false;
  }
  @return true;
}

// GET SIDE
// Given a top/left/bottom/right value with 1-4 items, figure out what each one is.
/**
 *   Get Side
 *   Determine a top/right/bottom/right value on a padding, margin, etc. property, no matter how many values were passed in.
 *   Use this function if you need to know the specific side of a value, but don't know if the value is using shorthand.
 *
 *   @param {list|number} $val - Value to analyze. Should be a shorthand sizing property, e.g. "1em 2em 1em"
 *   @param {keyword} $side - Side to return. Should be top, right, bottom, or left.
 *
 *   @return A single value based on $val and $side.
 */
@function get-side($val, $side) {
  $length: length($val);

  @if $length == 1 {
    @return $val;
  }
  @if $length == 2 {
    @return map-get((
      top: nth($val, 1),
      bottom: nth($val, 1),
      left: nth($val, 2),
      right: nth($val, 2),
    ), $side);
  }
  @if $length == 3 {
    @return map-get((
      top: nth($val, 1),
      left: nth($val, 2),
      right: nth($val, 2),
      bottom: nth($val, 3),
    ), $side);
  }
  @if $length == 4 {
    @return map-get((
      top: nth($val, 1),
      right: nth($val, 2),
      bottom: nth($val, 3),
      left: nth($val, 4),
    ), $side);
  }
}

// RANGES
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range){
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

/**
 *   Strip Unit
 *   Removes the unit (e.g. px, em, rem) from a value, returning the number only.
 *
 *   @param {number} $num - Number to strip unit from.
 *
 *   @return The same number, sans unit.
 */
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// CONVERT TO REM
@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

@function data($attr) {
  @if $namespace {
    @return '[data-' + $namespace + '-' + $attr + ']';
  }

  @return '[data-' + $attr + ']';
}

// $breakpoints: ('small': $small-up, 'medium': $medium-up, 'large': $large-up);
// Mixin to generate sizing classes
@mixin each-breakpoint() {
  @each $size, $breakpoint in $breakpoints {
    @if ($size == 'small') {
      @content;
    }
    @else {
      @media #{$breakpoint} {
        @content;
      }
    }
  }
}

// REM CALC

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//
//   rem-calc(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//
//   rem-calc((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//
//   rem-calc(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//
//   rem-calc((16px, 32px, 48), 8px);

@function rem-calc($values, $base-value: null) {
  @if $base-value == null {
    $base-value: foundation(global, rem-base);
  }
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}
