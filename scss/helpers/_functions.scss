// Foundation for Apps ALPHA
// by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@function foundation($component, $setting) {
  @return map-get(map-get($foundation, $component), $setting);
}

@mixin foundation-component($name, $settings) {
  @if type-of($settings) != 'map' {
    @error "The settings you pass in must be a map.";
  }
  $foundation: map-merge(
    ($name: $settings),
    $foundation
  ) !global;
}

// IMPORT ONCE
// We use this to prevent styles from being loaded multiple times for compenents that rely on other components.
$modules: () !default;
@mixin exports($name) {
  @if not (index($modules, $name)) {
    $modules: append($modules, $name) !global;
    @content;
  }
}

// IS IT LIGHT?
// Shorthand for checking the lightness of a color using Sass's ternary operator style
@function isitlight($color, $yes, $no) {
  @if (lightness($color) > 60%) {
    @return $yes;
  }
  @else {
    @return $no;
  }
}

// SMART SCALE
// Given a background color $color, returns an appropriate foreground color.
@function smartscale($color, $scale: 5%) {
  @if lightness($color) > 60% {
    $scale: -$scale;
  }
  @return scale-color($color, $lightness: $scale);
}

// RANGES
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range){
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// CONVERT TO REM
@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

@function data($attr) {
  @if $namespace {
    @return '[data-' + $namespace + '-' + $attr + ']';
  }

  @return '[data-' + $attr + ']';
}

// $breakpoints: ('small': $small-up, 'medium': $medium-up, 'large': $large-up);
// Mixin to generate sizing classes
@mixin each-breakpoint() {
  @each $size, $breakpoint in $breakpoints {
    @if ($size == 'small') {
      @content;
    }
    @else {
      @media #{$breakpoint} {
        @content;
      }
    }
  }
}

// REM CALC

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//
//   rem-calc(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//
//   rem-calc((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//
//   rem-calc(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//
//   rem-calc((16px, 32px, 48), 8px);

@function rem-calc($values, $base-value: null) {
  @if $base-value == null {
    $base-value: foundation(global, rem-base);
  }
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}
