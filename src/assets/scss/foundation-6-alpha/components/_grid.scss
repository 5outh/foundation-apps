@import "panels";

/*
	THE GRID
*/

body {
	// overflow: hidden;
}

/*
	Frames are containers that stretch to the full dimmensions of the browser window.
*/
.frame {
	display: flex;
	height: 100vh;
	margin: 0;
	padding: 0;
	position: relative;
	flex-flow: row nowrap;
	overflow: hidden;
}
// Containers imitate the sizing of old Foundation rows.
.container {
	max-width: 1000px;
	margin: 0 auto;
}

/*
	Groups are collections of content items. They're the "rows" of Foundation for Apps.
*/
.group {
	@extend .frame;
	height: auto;
	flex: 1 1 auto;
}

/*
	Blocks are containers for actual content. They're the "columns" of Foundation for Apps.
*/
@mixin block {
	flex: 1 1 auto;
	padding: 1rem;
	position: relative;
	top: auto;
	right: auto;
	bottom: auto;
	left: auto;
	overflow: hidden;

	// I am a bad person
	transform: none !important;
	width: auto !important;
	height: auto !important;
	z-index: auto !important;
	box-shadow: none !important;
	background: transparent !important;

	// Scrollable block
	&.scrollable {
		overflow: scroll;
		-webkit-overflow-scrolling: touch;
		-ms-overflow-style: -ms-autohiding-scrollbar;
	}

	// Collapse to remove padding
  &.collapse, .group.collapse > & {
  	padding: 0;
  }
}

// Blocks
// Right now block CSS must be output after panels for any of this madness to work
.block, .small-block {
	@include block;
}
@media #{$medium-up} {
	.medium-block {
		@include block;
	}
}
@media #{$large-up} {
	.large-block {
		@include block;
	}
}

.frame, .group {
	// Orientation classes
	&.vertical, &.small-vertical {
		flex-direction: column;
	}
	@media #{$medium-up} {
		&.medium-horizontal {
			flex-direction: row;
		}
		&.medium-vertical {
			flex-direction: column;
		}
	}
	@media #{$large-up} {
		&.medium-horizontal {
			flex-direction: row;
		}
		&.large-vertical {
			flex-direction: column;
		}
	}

	// Offsets
	@each $size, $breakpoint in ('small': $small-up, 'medium': $medium-up, 'large': $large-up) {
		@for $i from 1 through 11 {
			&.#{$size}-offset-#{$i} {
				margin-left: percentage(1 / $i);
				.vertical > &.#{$size}-offset-#{$i} {
					margin-left: 0;
					margin-top: percentage(1 / $i);
				}
			}
		}
	}

	// Block alignment
	&.align-right {
		justify-content: flex-end;
	}
	&.align-center {
		justify-content: center;
	}
	&.align-justify {
		justify-content: space-between;
	}
	&.align-spaced {
		justify-content: space-around;
	}

	// Stretch children along cross-axis
	&.stretch {
		align-items: stretch;
	}
}

// Shrink a flex item so it only takes up the space it needs
.group, .block {
	&.shrink {
		flex: 0 0 auto;
	}
}

// This prevents flicker when grid items shift around
.frame, .group, .block {
	transition: all 300ms ease;
	backface-visibility: hidden;
}

/*
	Block grid
*/
.block-grid {
	@extend .group;
	flex-wrap: wrap;
	justify-content: flex-start;
	align-items: flex-start;

	// Negative margins to compensate for padding on items
	margin-left: -0.5rem;
	margin-right: -0.5rem;

	// By default, each item only takes up as much space as it needs
	> div, > section, > li {
		@extend .block;
		flex: 0 0 auto;
		padding: 1rem;
	}
	// Sizing classes
	@each $size, $breakpoint in ('small': $small-up, 'medium': $medium-up, 'large': $large-up) {
		@for $i from 1 through 6 {
			&.#{$size}-#{$i} {
				> div, > section, > li {
					flex-basis: percentage(1 / $i)
				}
			}
		}
	}
}

// Sizing and ordering classes
@each $size, $breakpoint in ('small': $small-up, 'medium': $medium-up, 'large': $large-up) {
	@for $i from 0 through $total-columns {
		@media #{$breakpoint} {
			// Block sizing
			.#{$size}-#{$i} {
				flex: 0 1 percentage($i / $total-columns);
			}
			// Block ordering
			.#{$size}-order-#{$i} {
			  order: $i;
			}
		}
	}
}