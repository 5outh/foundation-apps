/*
	THE GRID
*/

/*
	Frames are containers that stretch to the full dimmensions of the browser window.
*/
.frame {
	margin: 0;
	height: 100vh;
	display: flex;
	flex-flow: row nowrap; 
	overflow: hidden;
	position: relative;

	&.vertical, &.small-vertical { 
		flex-flow: column nowrap; 
	}

	&.horizontal, &.small-horizontal { 
		flex-flow: row nowrap;
	}
	
	@media #{$medium-up} {
		&.medium-vertical { flex-flow: column nowrap; }
		&.medium-horizontal { flex-flow: row nowrap; }
	}
	@media #{$large-up} {
		&.large-vertical { flex-flow: column nowrap; }
		&.large-horizontal { flex-flow: row nowrap; }
	}
}
// Containers imitate the sizing of old Foundation rows.
.container {
	max-width: 1000px;
	margin: 0 auto;
}

.block, .group {
	transition: all 300ms ease;
	backface-visibility: hidden;
}

/*
	Groups are collections of content items. They're the "rows" of Foundation for Apps.
*/
.group {
	flex: 1 1 auto;
	position: relative;
	display: flex;
	flex-flow: row wrap;
	padding: 0;
	overflow: hidden;

	// Centering
	&.centered {
		margin-left: auto;
		margin-right: auto;
	}

	// Vertical grids
	&.vertical, &.small-vertical { flex-flow: column wrap; height: 100%; 
		&.scrollable, &.small-scrollable { overflow-y: scroll; flex-flow: column nowrap; }
		&.scrollable-vertical, &.small-scrollable-vertical { overflow-x: scroll; flex-flow: column wrap; }
	}
	@media #{$medium-up} {
		&.medium-vertical { flex-flow: column nowrap; }
		&.medium-horizontal { flex-flow: row nowrap; height: auto; }
	}
	@media #{$large-up} {
		&.large-vertical { flex-flow: column nowrap; }
		&.large-horizontal { flex-flow: row nowrap; height: auto; }
	}

	// Scrollable grids
	&.scrollable { overflow-x: scroll; flex-flow: row nowrap; -webkit-overflow-scrolling: touch; }
	&.scrollable-vertical { overflow-y: scroll; flex-flow: row wrap; height: 100%; -webkit-overflow-scrolling: touch; 
		&>.block:not([class*="small-"]) { flex-basis: 100%; }
	}
	@media #{$medium-up} {
		&.medium-scrollable { overflow-x: scroll; flex-flow: row nowrap; }
		&.medium-scrollable-vertical { overflow-y: scroll; flex-flow: row wrap; height: 100%; 
			&>.block:not([class*="small-"]) { flex-basis: 100%; }
		}

		&.medium-vertical { flex-flow: column wrap; height: 100%; 
			&.scrollable { overflow-y: scroll; flex-flow: column nowrap; }
			&.scrollable-vertical { overflow-x: scroll; flex-flow: column wrap; }
		}
	}
	@media #{$large-up} {
		&.large-scrollable { overflow-x: scroll; flex-flow: row nowrap; }
		&.large-scrollable-vertical { overflow-y: scroll; flex-flow: row wrap; height: 100%; 
			&>.block:not([class*="small-"]) { flex-basis: 100%; }
		}

		&.large-vertical { flex-flow: column wrap; height: 100%; 
			&.scrollable { overflow-y: scroll; flex-flow: column nowrap; }
			&.scrollable-vertical { overflow-x: scroll; flex-flow: column wrap; }
		}
	}
}

/*
	Blocks are containers for actual content. They're the "columns" of Foundation for Apps.
*/
@mixin block {
	flex: 1 1 auto;
	padding: 1rem;
	position: relative;
	top: auto;
	right: auto;
	bottom: auto;
	left: auto;
	overflow: hidden;

	// I am a bad person
	transform: none !important;
	width: auto !important;
	height: auto !important;
	z-index: auto !important;
	box-shadow: none !important;

	&.scrollable {
		overflow: scroll;
	}
  &.collapse, .group.collapse > & {
  	padding: 0;
  }
}

/*
	Vertical classes for groups and frames
*/
.vertical, .small-vertical, .medium-vertical, .large-vertical {
	> .block { height: auto; }
}

img { max-width: 100%; }

/*
	Off-canvas panels
*/
@mixin panel-base($direction: left, $speed: 0.25s) {
	display: block;
	position: absolute;
	transition: transform $speed linear;
	z-index: 100;
	overflow-y: scroll;
	padding: 1rem;
	background: #eee;

	// Box shadows
	$shadow-distance: 3px;
	$shadow-size: 10px;
	$shadow-color: rgba(black, 0.25);

	&.is-active {
		@if $direction == left        { box-shadow: $shadow-distance 0 $shadow-size $shadow-color; }
		@else if $direction == right  { box-shadow: -$shadow-distance 0 $shadow-size $shadow-color; }
		@else if $direction == top    { box-shadow: 0 $shadow-distance $shadow-size $shadow-color; }
		@else if $direction == bottom { box-shadow: 0 -$shadow-distance $shadow-size $shadow-color; }
	}
}
@mixin panel-position($direction: left, $size: 300px) {
	@if $direction == top {
		top: 0;
		left: 0;
		width: 100%;
		transform: translateY(-100%);

		&.is-active {
			transform: translateY(0%);
		}
	}
	@else if $direction == right {
		top: 0;
		right: 0;
		height: 100%;
		transform: translateX(100%);

		&.is-active {
			transform: translateX(0%);
		}
	}
	@else if $direction == bottom {
		bottom: 0;
		left: 0;
		height: 100%;
		transform: translateX(-100%);

		&.is-active {
			transform: translateX(0%);
		}
	}
	@else if $direction == left {
		top: 0;
		left: 0;
		height: 100%;
		transform: translateX(-100%);

		&.is-active {
			transform: translateX(0%);
		}
	}
}
@mixin panel-size($direction: left, $size: 300px) {
	// Vertical panels are always all the way tall and have a set width
	@if $direction == left or $direction == right {
		width: 100%;
		@media screen and (min-width: rem-calc($size)) {
			width: $size;
		}
	}
	// (For now) horizontal panels are as big as they need to be
	@if $direction == top or $direction == bottom {
		height: $size;
	}
}
@mixin panel($direction: left, $speed: 0.25s, $size: 300px) {
	@include panel-base($direction, $speed);
	@include panel-position($direction);
	@include panel-size($direction, $size);
}

/*
	CSS output
*/

.panel {
	@include panel-base;

	&-top {
		@include panel-position(top, auto);
	}
	&-right {
		@include panel-position(right);
	}
	&-bottom {
		@include panel-position(bottom, auto);
	}
	&-left {
		@include panel-position(left);
	}
}
.small-panel {
	@include panel-base;
}
@media #{$medium-up} {
	.medium-panel {
		@include panel;
	}
}
@media #{$large-up} {
	.large-panel {
		@include panel;
	}
}

// Blocks
// Right now block CSS must be output after panels for any of this madness to work
.block, .small-block {
	@include block;
}
@media #{$medium-up} {
	.medium-block {
		@include block;
	}
}
@media #{$large-up} {
	.large-block {
		@include block;
	}
}

// Sizing and ordering classes
@each $size, $breakpoint in ('small': $small-up, 'medium': $medium-up, 'large': $large-up) {
	@for $i from 0 through $total-columns {
		@media #{$breakpoint} {
			// Block sizing
			.#{$size}-#{$i} {
				flex: 0 0 percentage($i / $total-columns);
			}
			// Block ordering
			.#{$size}-order-#{$i} {
			  order: $i;
			}
		}
	}
}