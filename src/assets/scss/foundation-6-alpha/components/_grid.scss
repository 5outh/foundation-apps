@import "panels";

/*
	THE GRID
*/

body {
	// overflow: hidden;
}

/*
	Grid customization
*/
@mixin grid-size($size: expand) {
	@if (type-of($size) == 'number') {
		flex: 0 0 percentage($size / $total-columns);
	}
	@else if ($size == shrink) {
		flex: 0 0 auto;
	}
	@else if ($size == expand) {
		flex: 1 1;
	}
}
@mixin grid-orient($direction: horizontal, $stretch: false) {
	@if ($direction == vertical) {
		flex-flow: column nowrap;
		align-items: stretch;
	}
	@else {
		flex-flow: row wrap;
		align-items: if($stretch, stretch, flex-start);
	}
}
@mixin grid-stretch($stretch: true) {
	align-items: if($stretch, stretch, flex-start);
}
@mixin grid-align($align: left) {
	$options: (
		left: flex-start,
		right: flex-end,
		center: center,
		justify: space-between,
		spaced: space-around,
	);
	justify-content: map-get($options, $align);
}
@mixin grid-order($order: 0) {
	order: $order;
}
@mixin grid-collapse($collapse: true) {
	@if ($collapse) {
		padding: 0;
	}
}
@mixin grid-container($container: true) {
	max-width: 1200px;
	margin: 0 auto;
}
@mixin grid-nest($nest: true) {
	@if ($nest) {
		margin-left: -1rem;
		margin-right: -1rem;	
	}
}
@mixin grid-offset($offset: 0) {
	@if ($offset > 0) {
		margin-left: percentage($offset / $total-columns);
	}
}

/*
	Frames are containers that stretch to the full dimmensions of the browser window.
*/
@mixin grid-frame($size: expand, $vertical: false, $stretch: false, $align: left, $order: 0) {
	display: flex;
	height: 100vh;
	position: relative;
	overflow: hidden;

	@include grid-size($size);
	@include grid-orient($vertical);
	@include grid-stretch($stretch);
	@include grid-align($align);
	@include grid-order($order);
}

/*
	Groups are collections of content items. They're the "rows" of Foundation for Apps.
*/
@mixin grid-block($size: expand, $vertical: false, $stretch: false, $align: left, $order: 0) {
	@include grid-frame($size, $vertical, $stretch, $align, $order);

	// Reset the height used by frames
	height: auto;

	// Blocks will scroll by default if their content overflows
	overflow: auto;
	-webkit-overflow-scrolling: touch;
	-ms-overflow-style: -ms-autohiding-scrollbar;

	// These properties reset the panel styles
	transform: none;
	width: auto;
	height: auto;
	z-index: auto;
	box-shadow: none;
	background: transparent;
	top: auto;
	right: auto;
	bottom: auto;
	left: auto;
}

/*
	Blocks are containers for actual content. They're the "columns" of Foundation for Apps.
*/
@mixin grid-content($size: expand, $vertical: false, $stretch: false, $align: left, $order: 0, $collapse: false) {
	@include grid-block($size, $vertical, $stretch, $align, $order);
	@include grid-collapse($collapse);

	// Content blocks are not flex items and have padding
	display: block;
	padding: 1rem;
}

/*
	CSS Output
*/

.frame {
	@include grid-frame;
}
.block {
	@include grid-block;

	// Containers imitate the sizing of old Foundation rows.
	&.container { @include grid-container(true); }

	// Collapse margins when a group is not the direct child of a block
	&.nested { @include grid-nest(true); }
}

/*
	Shared styles for frames and groups
*/
.frame, .block {
	// Orientation classes
	&.vertical, &.small-vertical { @include grid-orient(vertical); }
	@media #{$medium-up} {
		&.medium-horizontal { @include grid-orient(horizontal); }
		&.medium-vertical   { @include grid-orient(vertical); }
	}
	@media #{$large-up} {
		&.medium-horizontal { @include grid-orient(horizontal); }
		&.large-vertical    { @include grid-orient(vertical); }
	}

	// Block alignment
	&.align-right   { @include grid-align(right); }
	&.align-center  { @include grid-align(center); }
	&.align-justify { @include grid-align(justify); }
	&.align-spaced  { @include grid-align(spaced); }

	// Stretch children along cross-axis
	&.stretch { @include grid-stretch(true); }
}

/*
	Shared styles for groups and blocks
*/
.block, .content-block {
	// Shrink a flex item so it only takes up the space it needs
	&.shrink {
		@include grid-size(shrink);
	}
}

/*
	Content blocks
*/
.content-block, .medium-content-block, .large-content-block {
	&.collapse, .block.collapse > & { @include grid-collapse; }
}
.content-block { @include grid-content; }
@media #{$medium-up} {
	.medium-content-block { @include grid-content; }
}
@media #{$large-up} {
	.large-content-block { @include grid-content; }
}

/*
	Sizing and ordering classes
*/
$block-grid-max-size: 6;
@each $size, $breakpoint in ('small': $small-up, 'medium': $medium-up, 'large': $large-up) {
	@for $i from 1 through $total-columns {
		@media #{$breakpoint} {
			// Block sizing
			.#{$size}-#{$i} {
				@include grid-size($i);
			}
			// Block ordering
			@at-root (without: media) {
				.order-#{$i} { @include grid-order($i); }
			}
			.#{$size}-order-#{$i} {
				@include grid-order($i);
			}
			// Offsets
			@if ($total-columns < 12) {
				.#{$size}-offset-#{$i} {
					@include grid-offset($i);
				}
			}
			// Parent sizing (block grids)
			// TODO: Make mixin
			.#{$size}-up-#{$i} {
				display: flex;
				overflow: visible;
				margin: {
					left:  -0.5rem;
					right: -0.5rem;
				}
				list-style-type: none;

			  > li, > div, > section {
			  	padding: 0 0.5rem 1rem;
			    flex: 0 0 percentage(1 / $i);
			  }
			}
		}
	}
}

// This prevents flicker when grid items shift around
.frame, .block, .content-block {
	transition: all 300ms ease;
	backface-visibility: hidden;
}