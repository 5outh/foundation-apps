@charset "UTF-8";
/**
 *   Exports
 *   Outputs the chunk of content passed if component $name hasn't yet been output.
 *   This prevents code duplication by keeping track of which components have already been output.
 *
 *   @param {string} $name - Name of component to output
 *
 *   @output The content passed, if the component has not yet been referenced.
 */
/**
 *
 *   Map Serialize
 *   Convert a map to JSON. Don't you even try to get fancy with this just yet.
 *
 *   @param {map} $map - Map to convert.
 *
 *   @return A string with a map converted to JSON.
 */
/**
 *   Map Next
 *   Find the next key in a map.
 *
 *   @param {map} $map - Map to traverse.
 *   @param {mixed} $key - Key to use as a starting point.
 *
 *   @return The value for the key after $key if $key was found. If $key was not found, or $key was
 *     the last value in the map, returns null.
 */
/**
 *   Is It Light?
 *   Checks the lightness of $color, and if it passes the $threshold of lightness, it returns the $yes color.
 *   Otherwise, it returns the $no color. Use this function to dynamically output a foreground color based on
 *   a given background color.
 *
 *   @param {color} $color - Color to check the lightness of.
 *   @param {color} $yes - Color to return if $color is light.
 *   @param {color} $no - Color to return if $color is dark.
 *   @param {percentage} $threshold - Threshold of lightness to check against.
 *
 *   @return The $yes color or $no color.
 */
/**
 *   Smart Scale
 *   Scales a color to be lighter if it's light, or darker if it's dark.
 *   Use this function to "fade" a color appropriate to its lightness.
 *
 *   @param {color} $color - Color to scale.
 *   @param {percentage} $scale - Amount to scale up or down.
 *   @param {percentage} $threshold - Threshold of lightness to check against.
 *
 *   @return A scaled color.
 */
/**
 *   Has Value
 *   Returns true if a value is not 0, null, or none.
 *   Use this function to check for values like border: 0 or box-shadow: none.
 *
 *   @param $val - Value to check.
 *
 *   @return True if $val is not 0, null, or none.
 */
/**
 *   Get Side
 *   Determine a top/right/bottom/right value on a padding, margin, etc. property, no matter how many values were passed in.
 *   Use this function if you need to know the specific side of a value, but don't know if the value is using shorthand.
 *
 *   @param {list|number} $val - Value to analyze. Should be a shorthand sizing property, e.g. "1em 2em 1em"
 *   @param {keyword} $side - Side to return. Should be top, right, bottom, or left.
 *
 *   @return A single value based on $val and $side.
 */
/**
 *   Get Border Value
 *   Given border $val, find a specific element of the border, which is $elem.
 *   Possible values for $elem are width, style, and color.
 *
 *   @param {list} $val - Border value to find a value in.
 *   @param {keyword} $elem - Border component to extract.
 *
 *   @param If the value exists, returns the value. If the value is not in the border definition,
 *     the function will return a 0px width, solid style, or black border.
 */
/**
 *   Get Shadow Value
 *   Given shadow value $val, find a specific element of the shadow, which is $elem.
 *   Possible values for $elem are x, y, size, spread, color, and inset.
 *
 *   @param {list} $val - Shadow value to find a value in.
 *   @param {keyword} $elem - Shadow component to extract.
 *
 *   @return If the value exists, returns the value. If the value is not set, returns false.
 *     If $elem is "inset", returns true, otherwise false.
**/
/**
 *   Strip Unit
 *   Removes the unit (e.g. px, em, rem) from a value, returning the number only.
 *
 *   @param {number} $num - Number to strip unit from.
 *
 *   @return The same number, sans unit.
 */
/*! sassyjson - v1.1.8 - 2014-06-01 */
/* >> Bootcamp >> */
Test Results {
  Success: true;
  Stats:  ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔ ✔;
  Tests: 23;
  Asserts: 44;
  Passed: 23;
  Failed: 0;
  Skipped: 0; }

/* << Bootcamp << */
